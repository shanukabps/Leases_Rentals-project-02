[{"D:\\react\\interviewProject02\\rent_payment\\src\\index.js":"1","D:\\react\\interviewProject02\\rent_payment\\src\\App.js":"2","D:\\react\\interviewProject02\\rent_payment\\src\\reportWebVitals.js":"3","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\Home\\Home.js":"4","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\LeasesInformation\\LeasesInformation.js":"5","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\Navbar\\Navbar.js":"6","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\footer\\footer.js":"7","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\notfound\\notfound.js":"8","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\GetInstalmentTable\\GetInstalmentTable.js":"9","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\GetTenantesNameTable\\GetTenantersNameTable.js":"10"},{"size":544,"mtime":1606923875103,"results":"11","hashOfConfig":"12"},{"size":1004,"mtime":1607446573532,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":3481,"mtime":1607427436268,"results":"15","hashOfConfig":"12"},{"size":4213,"mtime":1607449568986,"results":"16","hashOfConfig":"12"},{"size":773,"mtime":1607366008623,"results":"17","hashOfConfig":"12"},{"size":4408,"mtime":1607365114420,"results":"18","hashOfConfig":"12"},{"size":347,"mtime":1607365211287,"results":"19","hashOfConfig":"12"},{"size":7777,"mtime":1607428060726,"results":"20","hashOfConfig":"12"},{"size":701,"mtime":1607427415305,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"10uics5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\react\\interviewProject02\\rent_payment\\src\\index.js",[],["45","46"],"D:\\react\\interviewProject02\\rent_payment\\src\\App.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\reportWebVitals.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\containers\\Home\\Home.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\containers\\LeasesInformation\\LeasesInformation.js",["47"],"/**\r\n *\r\n * LeasesInformation  functional comonent\r\n * This component fetched data from https://hiring-task-api.herokuapp.com/v1/leases/:id\r\n * id sent from Home component through http params as id\r\n * calling @function  GetpaymentInstalmentTable -get leases infromation  tenanter's who wonby id and displyy that infromation in the table\r\n * if  dealy to fetched data this component ,show loading....\r\n *\r\n *\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport GetInstalmentTable from \"../GetInstalmentTable/GetInstalmentTable\";\r\n\r\n/***\r\n *\r\n *\r\n * show leases Infromation tenaent who sent tenanat id by Home\r\n * @param {string} id -tenant id sent by Home(Click tenant nameby user)\r\n * @param {Array} data - leases infromation about tenanter (fetched from api)\r\n * @param {boolean} isFetchdata-get response from api\r\n * @param {string} TenantName-tenanter's name\r\n *\r\n *\r\n */\r\n\r\nfunction LeasesInformation() {\r\n  let { id } = useParams();\r\n  const [data, setdata] = useState(null);\r\n  const [TenantName, setTenantName] = useState(\"\");\r\n  const [isFetchdata, setIsFetchdata] = useState(false);\r\n\r\n  /**\r\n   * call @function fetchdata\r\n   * checked , data is available or not ,if data not null call @function getTenantName\r\n   * call the @function  GetpaymentInformation after data available\r\n   * use Effect re render changing the @param isFetchdata\r\n   */\r\n\r\n  useEffect(() => {\r\n    fetchdata();\r\n\r\n    if (data !== null) {\r\n      getTenantName();\r\n    }\r\n  }, [isFetchdata]);\r\n\r\n  /**\r\n   *\r\n   * @function fetchdata -fetch data from the given url using axios\r\n   * @param  {Object} -response - from url  response.data - array\r\n   * @returns fetched data store in the @data using setdata and set @isFetchdata true\r\n   *\r\n   */\r\n\r\n  const fetchdata = async () => {\r\n    await axios\r\n      .get(`https://hiring-task-api.herokuapp.com/v1/leases/${id}`)\r\n\r\n      .then((response) => {\r\n        // console.log(\"fetch\");\r\n        setdata(response.data);\r\n        setIsFetchdata(true);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  //this is not sutalbe but use it to redirect home if chaged param mannualy\r\n  if (TenantName === undefined) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @function getTenantName -get leases data from session storage and find the respective name for a given id\r\n   *\r\n   * @param {Array} tenant -details get from session Storage\r\n   * @param {string} TenantName -Tenanters respective  for a given id\r\n   * @returns {string} TenanterName\r\n   *\r\n   *\r\n   */\r\n  const getTenantName = () => {\r\n    const tenant = JSON.parse(sessionStorage.getItem(\"leases\"));\r\n\r\n    const tenantname = tenant.find((r) => {\r\n      return r.id === id;\r\n    });\r\n    setTenantName(tenantname);\r\n  };\r\n\r\n  /**\r\n   *\r\n   *calling the @GetInstalmentTable component\r\n   *show the instalment in the table and show tha name of tenanter's\r\n   *\r\n   *\r\n   */\r\n\r\n  return (\r\n    <div className=\"mb-5 tablemargin\">\r\n      <h4 className=\"mb-5 ml-2 \">Leases Information</h4>\r\n\r\n      {!data ? (\r\n        <div>\r\n          <h2 key={\"lodingleaseInorh2\"} className=\"text-danger text-center\">\r\n            Loding...\r\n          </h2>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"mr-5 ml-5 mb-5\">\r\n            <div className=\"d-flex justify-content-center\">\r\n              <div className=\"pt-1\">\r\n                <PersonIcon fontSize=\"large\" />\r\n              </div>\r\n              <div className=\"pl-1 pt-1 pb-2\">\r\n                <h2 key={\"hetntheadName\"} className=\"text-primary\">\r\n                  {TenantName?.tenant}\r\n                </h2>\r\n              </div>\r\n            </div>\r\n\r\n            <GetInstalmentTable\r\n              key={id + \"data\"}\r\n              id={data.id}\r\n              start_date={data.start_date}\r\n              end_date={data.end_date}\r\n              rent={data.rent}\r\n              frequency={data.frequency}\r\n              payment_day={data.payment_day}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeasesInformation;\r\n","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\Navbar\\Navbar.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\containers\\footer\\footer.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\containers\\notfound\\notfound.js",[],"D:\\react\\interviewProject02\\rent_payment\\src\\containers\\GetInstalmentTable\\GetInstalmentTable.js",["48"],"/**\r\n *\r\n *GetInstalmentTable  functional comonent manly done  calculate instalment and show in using instalment Table\r\n *\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n/**\r\n *@function GetInstalmentTable calculate instalment and show in using instalment Table\r\n * @param {Array} paymenta- payment leases infromation (From ,to ,amount, days)\r\n * @param {string} start_date - start date of leases\r\n * @param {Date} endDate -leases end date\r\n * @param  {Number} PaymentDday paymentday in the weekly (Number)\r\n * @param {Number} rent-weekly payment\r\n * @param {String} fre-regular Instalment (weekly,monthly,fortnightly)\r\n *\r\n */\r\nfunction GetInstalmentTable({\r\n  start_date,\r\n  end_date,\r\n  rent,\r\n  frequency,\r\n  payment_day,\r\n}) {\r\n  const [paymenta, setPayment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    GetInstalmentInformation(\r\n      start_date,\r\n      end_date,\r\n      rent,\r\n      frequency,\r\n      payment_day\r\n    );\r\n  }, []);\r\n\r\n  /**\r\n   *\r\n   * @function getdiffrencedays -get date diffrent between start date and end date\r\n   *\r\n   * @param {Date} startDate -leases start date\r\n   * @param {Date} endDate -leases end date\r\n   * @return {Number} date diffrent\r\n   * @param {String} fre frquency\r\n   *\r\n   */\r\n\r\n  const getdiffrencedays = (startDate, endDate) => {\r\n    const remaindate = new Date(startDate);\r\n    const diffTime = Math.abs(endDate - remaindate);\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  };\r\n\r\n  /**\r\n   *\r\n   *payenent day(String) convert to number\r\n   *\r\n   * @param {string} payment_day -payment day\r\n   * @returns {Number} -payenent day as Number\r\n   *\r\n   */\r\n  const getpaymentday = (payment_day) => {\r\n    if (payment_day === \"monday\") return 1;\r\n    else if (payment_day === \"tuesday\") return 2;\r\n    else if (payment_day === \"wednesday\") return 3;\r\n    else if (payment_day === \"thursday\") return 4;\r\n    else return 5;\r\n  };\r\n\r\n  /***\r\n   *\r\n   * @function  getFirstPyamnetTodifferent -get days diffrence between leases start date and first payment day in the week\r\n   *\r\n   *@param {string} start_date - start date of leases\r\n   *@param {Date} startDate-start date of leases (date type)\r\n   *@param  {Number} PaymentDday paymentday in the weekly (Number)\r\n   *@returns {Number} day diffrence between leases start date and first payment day in the week\r\n   *\r\n   */\r\n\r\n  const getFirstPyamnetTodifferent = (start_date, startDate, paymentDday) => {\r\n    for (let i = 1; i <= 7; i++) {\r\n      let start = new Date(start_date);\r\n\r\n      start.setDate(start.getDate() + i);\r\n      if (startDate.getDay() === paymentDday) {\r\n        return 0;\r\n      } else if (paymentDday === start.getDay()) {\r\n        return getdiffrencedays(startDate, start);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   *@function getfrequency -convert payment frequency to Number\r\n   * @param {String} fre  -Payment frequency\r\n   * @returns {Number} -payment fequency as (Number)\r\n   *\r\n   */\r\n  const getfrequency = (fre) => {\r\n    if (fre === \"weekly\") return 7;\r\n    else if (fre === \"fortnightly\") return 14;\r\n    else return 28;\r\n  };\r\n\r\n  /**\r\n   * @function GetInstalmentInformation - Installment calculation\r\n   *       --->Installment from lesas statr day to regulr payment day in week\r\n   *           After regular instalment calculation according frequency\r\n   *           calculating last instalment amount\r\n   *           check whether last payment date is in between reqular payment interval if so calculate remain inastalment amount\r\n   * @param {String} start_date\r\n   * @param {String} end_date\r\n   * @param {Number} rent\r\n   * @param {String} fre\r\n   * @param {String} payment_day\r\n   *\r\n   *\r\n   */\r\n\r\n  const GetInstalmentInformation = async (\r\n    start_date,\r\n    end_date,\r\n    rent,\r\n    fre,\r\n    payment_day\r\n  ) => {\r\n    /**\r\n     *\r\n     * @param {Array} payment  - Instalment Information\r\n     * @param {Number} frequency  regular Instalment as Number\r\n     * @param {Number} paymentDday - paymentday in the weekly as Number\r\n     * @param {Date} startDate - lease startdate\r\n     * @param {Number}  topaymentdate - different between   starting lease  and regular payment date\r\n     * @param {Date} endDate- lease end date\r\n     * @param {Date} sumDate- start payment Date\r\n     *\r\n     */\r\n\r\n    let payment = [];\r\n\r\n    let frequency = getfrequency(fre);\r\n\r\n    let paymentDday = getpaymentday(payment_day);\r\n\r\n    let startDate = new Date(start_date);\r\n\r\n    let topaymentdate = getFirstPyamnetTodifferent(\r\n      start_date,\r\n      startDate,\r\n      paymentDday\r\n    );\r\n\r\n    const endDate = new Date(end_date);\r\n    let sumDate = new Date(start_date);\r\n\r\n    /**\r\n     *\r\n     * go to first regular payment date, now @param sumdate is First Regular payment date\r\n     *\r\n     */\r\n    sumDate.setDate(sumDate.getDate() + topaymentdate);\r\n\r\n    /**\r\n     *for loop calculate instalment from reqular payment date ending dapyment date\r\n     *@param {Date}  start  - First regular day(payment day) to befor date\r\n     *@param {Date} add1 - regular day\r\n     *@param {Date} nextdate - get next instalment date\r\n     *@param {float} amount - instalment acording to date\r\n     *\r\n     */\r\n    for (\r\n      let start = new Date(sumDate);\r\n      start <= endDate;\r\n      start.setDate(start.getDate() + frequency)\r\n    ) {\r\n      if (+start === +sumDate && topaymentdate !== 0) {\r\n        payment.push({\r\n          from: startDate,\r\n          to: new Date(start),\r\n          days: topaymentdate,\r\n          amount: ((rent / 7) * topaymentdate).toFixed(1),\r\n        });\r\n      }\r\n\r\n      let add1 = new Date(start);\r\n      add1.setDate(add1.getDate() + 1);\r\n\r\n      let nextdate = new Date(start);\r\n      nextdate.setDate(add1.getDate() + frequency - 1);\r\n\r\n      payment.push({\r\n        from: new Date(add1),\r\n        to: new Date(nextdate),\r\n        days: frequency,\r\n        amount: (rent * 2).toFixed(1),\r\n      });\r\n    }\r\n\r\n    /**\r\n     * check whether last payment date is in between reqular payment interval if so calculate remain inastalment amount\r\n     * last regular payment date passed the end date and set it to end date edit the days and amount\r\n     *\r\n     *\r\n     */\r\n\r\n    if (payment.length !== 0) {\r\n      //find the last instalment\r\n      let diffDays = getdiffrencedays(\r\n        payment[payment.length - 1].from,\r\n        endDate\r\n      );\r\n\r\n      /**\r\n       *\r\n       * if last instalment not equal to lease end date edit that\r\n       */\r\n      if (diffDays !== 0) {\r\n        payment[payment.length - 1].to = endDate;\r\n        payment[payment.length - 1].days = diffDays;\r\n        payment[payment.length - 1].amount = ((rent / 7) * diffDays).toFixed(1);\r\n\r\n        return setPayment(payment);\r\n      }\r\n      return setPayment(payment);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {paymenta.length === 0 ? (\r\n        <h1>Loading</h1>\r\n      ) : (\r\n        <div>\r\n          <table className=\"table table-sm table-hover text-center border  \">\r\n            <thead>\r\n              <tr className=\"bg-danger text-white\">\r\n                <th scope=\"col\">FROM</th>\r\n                <th scope=\"col\">TO</th>\r\n                <th scope=\"col\">DAYS</th>\r\n                <th scope=\"col\">AMOUNT</th>\r\n              </tr>\r\n            </thead>\r\n            {paymenta?.map((paymenta, index) => {\r\n              return (\r\n                <tbody key={\"header\" + index}>\r\n                  <tr>\r\n                    <td>{paymenta.from.toDateString()}</td>\r\n                    <td>{paymenta.to.toDateString()}</td>\r\n                    <td>{paymenta.days}</td>\r\n                    <td>{paymenta.amount}</td>\r\n                  </tr>\r\n                </tbody>\r\n              );\r\n            })}\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GetInstalmentTable;\r\n","D:\\react\\interviewProject02\\rent_payment\\src\\containers\\GetTenantesNameTable\\GetTenantersNameTable.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":49,"column":6,"nodeType":"55","endLine":49,"endColumn":19,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":36,"column":6,"nodeType":"55","endLine":36,"endColumn":8,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'fetchdata', and 'getTenantName'. Either include them or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has missing dependencies: 'GetInstalmentInformation', 'end_date', 'frequency', 'payment_day', 'rent', and 'start_date'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [data, fetchdata, getTenantName, isFetchdata]",{"range":"67","text":"68"},"Update the dependencies array to be: [GetInstalmentInformation, end_date, frequency, payment_day, rent, start_date]",{"range":"69","text":"70"},[1616,1629],"[data, fetchdata, getTenantName, isFetchdata]",[950,952],"[GetInstalmentInformation, end_date, frequency, payment_day, rent, start_date]"]